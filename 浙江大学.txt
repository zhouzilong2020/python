2020.3.1
	python存在解释区域规则
	为不同的对象分配内存：
	a = 1; b = 1;
	python是将对象和变量名的指向关系
	：小整数对象池，在这其中不需要额外分配内存空间，高效

	a = 1000; b = 1000;
	：对于大的对象，则额外分配内存空间

输入输出函数：
	input（“中间可以插入提示语”）所有输入读入字符串
	如果要进行转换，需要强制类型转换 如 a = int(input())
	输入多个值：a, b = input().split() 一行输入两个数据
	
	print(a, b, c...) print 中间可以接受多个参数！！！
	print默认以换行符输出结束：print（a, end =‘ ’可以接受一个结束的参数！！！

数字类型：
	round（0.1 + 0.2， 要保留的位数）
	负数！： a = complex(1,2)，1是实部，2是虚部
	/浮点数除法
	//整数出发---》向左取整数！！！ 3/2 = 1， -3/-2 = -2！！！
	**幂运算
	python不支持自增、自减运算！！！！

运算：
	python支持连续比较 a < b < c 等价于： a<b and b<c
	存在一个逻辑短路原则，只要有一个能够使得推出计算，则不计算

	!!不同运算的结合性不一样。幂运算是自右向左2**3**2 == （2**（3**2））

*内置转换函数*：
	有编码类转换函数，和类型转化函数！！！
	比如list（‘abcd’）将一个字符串转换为列表
	int( ,[,base = 10]) 后面为可选参数，可以按照某一个进制进行表示
	比如int(100, 8)按照把八进制进行转化为int
	
	ord（）转换为ascii码
	chr（）将某一ascii码转化为对应的编码
	
	可以巧妙的使用转换函数来获得不同内置类型的特性

2020.03.03
赋值语句
	python可以对一个序列变换
	a,b = 1, 2
	当右边多了，可以使用
	a, *b = 1， 2， 3 则剩下的2，3全部赋给b

	交换的逻辑实现：
		a, b = b, a
		在过程中，首先生成一个元组c = (b,a)，然后依次为a，b赋值
		eg. 
			array = [1,2,3,4,5,6,7]
			x = 0
			array[x],array[array[x]] = array[array[x]],array[x]
		首先，生成（2，1)这个元组，然后为前面的两个变量赋值
		先为array[x]赋值-> array[x] = 2；
		再为array[array[x]]赋值-> array[（2）] = 1;
		此时，结果为：	[2,2,1,4,5,6,7]

If语句：(逻辑关系通过缩紧来实现）
	if ...:
		...
	else:
		...
	二元运算符：：
		y = 一个数值 if条件 else 另外一个数值

遍历列表：
	for i in [...]: #一个列表
		...
	方便的产生自然数序列：range(start, stop, step)：
		range(10)	::从0到9共十个数字
		range(1,10)	::从1到10共十个数字
		range(1,10,-1)	::步长为-1

推导式：
1.列表推导：（“src1.py”）
	列表：[1，2，3，a,b,c]，中间的元素类型可以相同也可以不一致
		列表的加法：两个列表相加
		列表的乘法:[1]*10 --> [1,1,1,1,1,...]
		索引
	eg.[2*number for number in range(1,10)]
           [number for number in range(1,10) if number %2 ==1]
	
	[列表项 for number in [...] if ... ]
	[列表项1 if... else 列表项2 for number in [...]]
	
	eg.求6+66+666+6666...
		sum([int(6*i) for i in range(1,100)])

格式化输出：
	字符串格式：format()在后面会有介绍
	print("{第几个参数:.2f}“.format(参数列表））
		
	





















