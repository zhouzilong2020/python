2020.3.1
	python存在解释区域规则
	为不同的对象分配内存：
	a = 1; b = 1;
	python是将对象和变量名的指向关系
	：小整数对象池，在这其中不需要额外分配内存空间，高效

	a = 1000; b = 1000;
	：对于大的对象，则额外分配内存空间

输入输出函数：
	input（“中间可以插入提示语”）所有输入读入字符串
	如果要进行转换，需要强制类型转换 如 a = int(input())
	输入多个值：a, b = input().split() 一行输入两个数据
	！！！：
	x, y = map(int, input().split()) 可以一行输入多个数据，并且进行类型转换
	
	print(a, b, c...) print 中间可以接受多个参数！！！
	print默认以换行符输出结束：print（a, end =‘ ’可以接受一个结束的参数！！！

数字类型：
	round（0.1 + 0.2， 要保留的位数）
	负数！： a = complex(1,2)，1是实部，2是虚部
	/浮点数除法
	//整数出发---》向左取整数！！！ 3/2 = 1， -3/-2 = -2！！！
	**幂运算
	python不支持自增、自减运算！！！！

运算：
	python支持连续比较 a < b < c 等价于： a<b and b<c
	存在一个逻辑短路原则，只要有一个能够使得推出计算，则不计算

	!!不同运算的结合性不一样。幂运算是自右向左2**3**2 == （2**（3**2））

*内置转换函数*：
	有编码类转换函数，和类型转化函数！！！
	比如list（‘abcd’）将一个字符串转换为列表
	int( ,[,base = 10]) 后面为可选参数，可以按照某一个进制进行表示
	比如int(100, 8)按照把八进制进行转化为int
	
	ord（）转换为ascii码
	chr（）将某一ascii码转化为对应的编码
	
	可以巧妙的使用转换函数来获得不同内置类型的特性

2020.03.03
赋值语句
	python可以对一个序列变换
	a,b = 1, 2
	当右边多了，可以使用
	a, *b = 1， 2， 3 则剩下的2，3全部赋给b

	交换的逻辑实现：
		a, b = b, a
		在过程中，首先生成一个元组c = (b,a)，然后依次为a，b赋值
		eg. 
			array = [1,2,3,4,5,6,7]
			x = 0
			array[x],array[array[x]] = array[array[x]],array[x]
		首先，生成（2，1)这个元组，然后为前面的两个变量赋值
		先为array[x]赋值-> array[x] = 2；
		再为array[array[x]]赋值-> array[（2）] = 1;
		此时，结果为：	[2,2,1,4,5,6,7]

If语句：(逻辑关系通过缩紧来实现）
	if ...:
		...
	else:
		...
	二元运算符：：
		y = 一个数值 if条件 else 另外一个数值

遍历列表：
	for i in [...]: #一个列表
		...
	方便的产生自然数序列：range(start, stop, step)：
		range(10)	::从0到9共十个数字
		range(1,10)	::从1到10共十个数字
		range(1,10,-1)	::步长为-1

推导式：
1.列表推导：（“src1.py”）
	列表：[1，2，3，a,b,c]，中间的元素类型可以相同也可以不一致
		列表的加法：两个列表相加
		列表的乘法:[1]*10 --> [1,1,1,1,1,...]
		索引
	eg.[2*number for number in range(1,10)]
           [number for number in range(1,10) if number %2 ==1]
	
	[列表项 for number in [...] if ... ]
	[列表项1 if... else 列表项2 for number in [...]]
	
	eg.求6+66+666+6666...
		sum([int(6*i) for i in range(1,100)])

格式化输出：
	字符串格式：format()在后面会有介绍
	print("{第几个参数:.2f}“.format(参数列表））
		
	

2020.03.07
数字类型：
	整数：与数学中概念一致，几乎没有上限，不同于C语言等
		前导符号： 0b 0o 0x 2、8、16进制
	浮点数：与数学中实数概念一致、但是有取值范围和精度限制
		在计算时存在不确定的尾数，有误差
		消除尾数：round(一个数值， 保留的小数)
	复数：complex(实部，虚部)

运算符：
	**幂、//整数除法（在数轴上向左取整）、/浮点数除法！

序列类型：
	序列加法不会改变两边的值
	in/ not in
	-1:从右边向左数
	字符串不能支持单个元素的赋值

切片：
	取出其中一段子序
	str[开始位置(包含) : 终止位置(不包含)] :始终是在这个位置的前面切一刀
	str[0 : -1]可以去掉最后的一个元素！用负数切片可以始终排出末尾的东西
	str[ : -1]如果少写某一个数字，则代表从开始取到某个地方
	
	如何得到某位元素？
	1.你猜一个不存在的位置，可以用超过的位数来将最后一个元素包括进来
		但是不安全，访问了未知的地方
	2.直接省略冒号后面的数字str[3:]就可以取到最后一个

序列的函数：
	len()求元素个数
	min()
	max()

字符串：
	用双引号和单引号来交替使用，可以使得str中间出现‘or’‘
	
	三引号‘’‘ ’‘’：可以跨行、换行的过程会自动加上
	
	在每一行加上一个\，可以跨行输入，但是输出时并不会有回车换行
	
	在字符串前面加上一个r（raw）将所有字符当作原始字符来对待，不解释为特殊字符

字符串函数：不会修改本身，而是生成一个新的字符串
	
	lower():全部变小写
	find('字串'， 起始查找的位置):字符串匹配，范围第一次匹配的位置
	count('字串')：出现次数
	（l/r)strip()：取出空格，默认为两头都去掉
	replace('替换前', '替换后')

	str()：将任何一个东西转化为字符串来表达

指定格式：
	字符串运算%:格式限定符
		'asdasd %d，%d' % (1,2)
		用后面的数字替换前面的百分号，
	%10d:这个数据输出的时候保留一个位置

列表操作：
	列表的自变量
	list():将一个任意类型转化为列表
	广义表 eg.
		[[1,2,3],[4,5,6],[7,8,9]]

	列表的变量是一个列表的管理者，改变量并不拥有列表，实际存放的是起始位置的变量
	而数字变量则不是

	！！！**如果要产生一个新的列表，则：
		t1 = t2[:]

	可以直接对切片来操作！
		t1[2:4] = [1,2] 直接将右边来替代切片
		若果右边的元素个数大于左边，则全部塞下
		如果有变没有元素，可以直接删掉
		
	del t[2]可以直接删除列表当中的某一个元素

列表的函数：
	append()：增加一个元素
	extend()：在末尾曾加一段序列
	注意！
		如果append一个列表，则列表作为一个元素加入到原列表最后
		如果extend一个列表，则这个列表的元素插入到末尾
		
	insert(位置, 元素)：在某一个位置增加一个元素
			如果位置超过了最大的下标，则直接添加到末尾
	remove(位置)：删除某一个位置
	pop()：最后一个元素弹出
	pop(位置)：可以弹出指定位置的元素
	reverse():颠倒顺序 ：中心替换！
	index()：查找元素在列表的位置.  「字符串使用的是find()」

	sort():排序

列表和字符串的操作：
	str.spilt('分隔符（可以是多个字符！）'):对一个字符串进行分割，产生一个列表
		eg. 'I am a good man'.split()
		     ['I', 'am' , 'good', 'man']
	' '.join(list)：用一个' '来将list链接起来，传化成一个字符串

 
元组（tuple）：
	使用圆括号，而不是列表的方括号，也存在元组推导式
	元组是一种不可修改的数据，就和字符串一样
	
	所有能够改变元组的函数都不能使用
	为什么要用？
		不希望被人搞你的数据
		就一个列表转化为tuple()
	tuple()
	python中以逗号分隔的数据默认为一个元组
		3, 4 ---> (3, 4)
	函数如何接受一个变长参数？使用元组！

随机函数库：
	import random
	random.shuffle(...)：将一个列表打乱顺序
	random.uniform(...):生成a,b间均匀分布的数
	random.randint(...):生成a,b的整数
	random.choice(...)：随机找出一个元素
	random.random（闭区间, 开区间）：找出一个0-1的浮点数
	random.seed():随机数种子，一个确定的seed对应一个随机数序列
		测试的时候要给定确定的seed
		如果给时间就可以给出不同的序列
	

2020.3.10
If语句：
	if (条件表达式 1.逻辑表达式 2.元素是否在列表中）:
		dent
	else: 

！！tips！！：x, y = map(int, input().split()) 可以一行输入多个数据，并且进行类型转换	
	(split()就是将input转换为一个列表）
	map(function, utterable, ...)
	第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次function 函数返回值的新列表
	***注意！*** map返回的是一个迭代器，只能用for迭代一次，第二次使用时已经到了末尾，无论是for遍历还是print，都实际上将迭代器便利到了末尾

while语句：
	while ... :
		dent
	python经常使用while true 然后用if + break 破除

for语句：
	1.遍历一个列表 2.计数循环（range())

	如何区别中途break和遍历结束呢？
		1.添加flag（其他语言） 
		2.python大法！
			for ... :
				...
			else:（for循环正常结束则执行！！！）
				...
Range函数，产生数列：
	range(start , end, step)从start开始到end结束（不包括end）步长为step

异常：！！！！！
	try:
	 	...(异常出现但程序不终止）
	except:（任何异常均可以处理！）		：：有一些常见的异常！可以去参考一下有对应的表格！
		...（except提供一些错误消息）
	else:
		...(try正常执行不抛出异常则执行）
	finally：
		...（不管异不异均执行)
	
	
	
	
	
































